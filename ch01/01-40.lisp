(define tolerance 0.00001)
(define (fix-point f first-guess)
  (define (close-enough v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try-it x)
    (let ((next (f x)))
    (cond ((close-enough x next) x)
          (else (try-it next)))))
  (try-it first-guess))

(define dx 0.00001)
(define (deriv g)
  (lambda (x) 
    (/ (- (g (+ x dx)) (g x)) dx)))
(define (newton-transform g)
  (lambda (x)
    (- x (/ (g x) ((deriv g) x)))))
(define (newton-method g guess)
  (fix-point (newton-transform g) guess))
(define (cubic a b c)
  (lambda (x) (+ (expt x 3) (* a (expt x 2)) (* b x) c)))
(define (f a b c)
  (newton-method (cubic a b c) 1))
(f 1 1 1)
