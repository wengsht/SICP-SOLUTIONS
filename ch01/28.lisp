(define (fast-exp-mod base e mo)
  (define (normalize x)
    (if (and (= (remainder (square x) mo) 1) 
             (not (or (= x 1) (= x (- mo 1)))))
      0
      x))
  (cond ((= e 0) 1)
        ((even? e) (remainder (square (normalize (fast-exp-mod base (/ e 2) mo))) mo))
        (else (remainder (* (square (normalize (fast-exp-mod base (/ (- e 1) 2) mo))) base) mo))))
(define (fermat-test a n)
  (define (try-it a)
    (= (fast-exp-mod a (- n 1) n) 1))
  (try-it a))
(define (fast-prime? n x)
  (cond ((= x n) true)
        ((fermat-test x n) (fast-prime? n (+ x 1)))
        (else false)))
(define (prime? n)
  (fast-prime? n 2))
(prime? 561)
(prime? 1105)
(prime? 1729)
(prime? 2465)
(prime? 2821)
(prime? 6601)
(prime? 7)
(prime? 9)
(prime? 11)
