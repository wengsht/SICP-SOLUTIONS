(define (sum term a next b)
  (if (> a b)
    0
    (+ (term a) (sum term (next a) next b))))
(define (simpson f a b n)
  (define (get-h a b n)
    (/ (- b a) n))
  (_simpon f a b n (get-h a b n)))
(define (_simpon f a b n h)
  (define (add-h x) (+ x h))
  (define (term-sim x) 
    (cond ((or (= x a) (= x b)) (f x))
          ((even? (/ (- x a) h)) (* 2 (f x)))
          (else (* 4 (f x))))) 
  (* (/ h 3) (sum term-sim a add-h b)))
(define (cube x)
  (* x x x))
(simpson cube 0 1 1000)
(define (g x) x)
(simpson g 0 100 100)
