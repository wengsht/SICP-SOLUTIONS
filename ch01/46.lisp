(define (iterative-improve good? improve)
  (lambda (guess)
    (define (inner inner-guess)
      (cond ((good? inner-guess) inner-guess)
             (else (inner (improve inner-guess)))))
    (inner guess)))
;
(define (fix-point f guess)
  (define dx 0.00001)
  (define (inner-improve x)
    (f x))
  (define (inner-good? y) 
    (< (abs (- y 
               (inner-improve y))) 
       dx))
  ((iterative-improve inner-good? inner-improve) guess))
(fix-point (lambda (y) (+ (sin y) (cos y))) 1.0)
(define (sqrt x)
  (define (average a b) (/ (+ a b) 2.0))
  (fix-point (lambda (y) (average y (/ x y))) 1.0))
(sqrt 2.0)
(sqrt 4.0)
