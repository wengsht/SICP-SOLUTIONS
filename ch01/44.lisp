(define (compose f g)
  (lambda (x)
    (f (g x))))
(define (repeated f n)
  (cond ((= n 1) f)
        (else (compose f 
                       (repeated f (- n 1))))))
(define (smooth f)
  (define dx 0.00001)
  (lambda (x)
    (/ (+ (f (- x dx))
          (f x)
          (f (+ x dx)))
       3.0)))
(define (smooth-n f n)
  (repeated smooth n) f)
(define (square x) (* x x))
((smooth-n square 2) 2.0)
