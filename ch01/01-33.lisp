(include "my_math.lisp")
(define (filter-accumulate filter combiner null-value term a next b)
  (define (iter-acc a result)
    (cond ((> a b) result)
          ((filter a) (iter-acc (next a) (combiner result a)))
          (else (iter-acc (next a) result))))
  (iter-acc a null-value))
(define (filter-sum filter term a next b)
  (filter-accumulate filter + 0 term a next b))
(define (filter-product filter term a next b)
  (filter-accumulate filter * 1 term a next b))
; a)
(define (sum-prime a b)
  (filter-sum prime? identity a inc b))
(sum-prime 1 7)
; b)
(define (pro-gcd n)
  (define (gcd1n x)
    (= (gcd x n) 1))
  (filter-product gcd1n identity 1 inc (- n 1)))
(pro-gcd 5) ; 1*2*3*4=24
(pro-gcd 10) ;1*3*7*9=189
