(define (small-divisor n)
  (define (divide? x n)
    (= 0 (remainder n x)))
  (define (square x) (* x x))
  (define (inner-divisor n x)
    (cond ((> (square x) n) n)
          ((divide? x n) x)
          (else (inner-divisor n (+ x 1)))))
  (inner-divisor n 2))
(define (fast-exp-mod base e mo)
  (cond ((= e 0) 1)
        ((even? e) (remainder (square (fast-exp-mod base (/ e 2) mo)) mo))
        (else (remainder (* (square (fast-exp-mod base (/ (- e 1) 2) mo)) base) mo))))
(define (fermat-test n)
  (define (try-it a)
    (= (fast-exp-mod a n n) a))
  (try-it (+ 1 (random (- n 1)))))
(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (fast-prime? n 10)
    (report-prime (- (runtime) start-time))))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))
(define (search-for-primes a b)
  (define (inner a b)
    (if (<= a b) 
      (timed-prime-test a))
    (if (<= a b)
      (inner (+ a 2) b)))
  (inner (if (even? a) (+ a 1) a) b))
(search-for-primes 10000000000000000002000 10000000000000000005000)  ; 0.01
