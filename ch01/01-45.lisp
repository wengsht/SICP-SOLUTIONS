(define (compose a b)
  (lambda (x) (a ( b x))))
(define (repeated f n)
  (if (= n 1) (lambda (x) (f x))
    (compose (repeated f (- n 1)) f)))

(define tolerance 0.00001)
(define (fix-point f first-guess)
  (define (close-enough v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try-it x)
    (let ((next (f x)))
    (cond ((close-enough x next) x)
          (else (try-it next)))))
  (try-it first-guess))

(define (average-damp f)
  (lambda (x) (/ (+ x (f x)) 2)))
(define (sqrtn x n)
  (define (times n)
    (floor (/ (log n) (log 2))))
  (fix-point
    ((repeated average-damp (times n)) (lambda (y) (/ x (expt y (- n 1))))) 1.0))
(sqrtn 100000 5)
