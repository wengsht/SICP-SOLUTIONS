; fix-point
(define tolerance 0.00001)
(define (fix-point f guess)
  (define (close? a b)
    (< (abs (- a b)) tolerance))
  (let ((nxt (f guess)))
    (if (close? guess nxt)
      nxt
      (fix-point f nxt))))
; newton-method
(define dx 0.00001)
(define (deriv f)
  (lambda (x)
    (/ (- (f (+ x dx)) (f x))
       dx)))
(define (newton-transform g)
  (lambda (x)
    (- x
       (/ (g x)
          ((deriv g) x)))))
(define (newton-method f guess)
  (fix-point (newton-transform f) guess))
(define (cubic a b c)
  (lambda (x)
    (+ (* x x x)
       (* a x x)
       (* b x)
       c)))
(newton-method (cubic 1.0 1.0 1.0) 1.0)
